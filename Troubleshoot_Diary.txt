Timestamps of what changes were made. May help to fix bugs, I jumped back and forth alot so I may've missed something out. The screenshots are in 'scteenshot_troubleshoot'


Upon ititial run, most tiplocs have issues displaying the routing
TESTING-MAIN


ran on 30.03.2023 at 00:00, date shown as 2023-03-27

after hardcoding the date, the issues still persisted

What to do:

* fix date function
* go over server, see if there is an issue there. If noe can be found, look over forntend code
___________________________________________________________________________________

Another issue is that the tiplocs no longer display after a couple of train mappings. The back button leads to a blank screen.

What to do:

* Look over what happens after the back button is pressed

___________________________________________________________________________________
00:07

After updating the server to the latest version (the hard coded date was checked to be the correct one), The server would shut down immediately.
When 'node server' was entered into the terminal, the command would immediately stop. No explination. The socket on the client side should trigger
the old highlighted out code. But this was not the case.

00:13

refer to 'screenshot_troubleshhot/sidebar_route_error' to see the common issue in displaying the tiplocs


00:16

I will begin to build a new version of our project, combining working parts of both frontend and backend


___________________________________________________________________________________________________
00:21

From TESTING-SOCKETS the newest front-end features are not present. The functionality to update the movements.json file every 10 seconds is also not present.
The function to det the current date is also not working
Idea:
	~ have a function on server start that gets all the latest working tiplocs. Do this twice as the first list doesn't typically have many tiplocs on it. 
	  The socket is used for the live updates now, so that cannot be used on connection
	~ have a function that can check the current date and if the last update for the tiplocs file is not the same as the current date, run the code to get the latest
	  tiplocs. Whenever the file is updated, weite the date to a file.

What to do:

- take all from TESTING-SOCKETS and slowly introduce front-end bit by bit. Try to solve any conflicts.

00:30

appear to be having difficulties connecting to API...

00:37

placed all the code from backend apart from the getMovementUpdates code into the new workspace. Moved in the public folder from TESTING-SOCKETS.


00:46

Tried using postman to fetch, can confirm API is not responding
Will try again at 03:00

RECAP:

-need to generate correct date to fetch working tiplocs. Once fetched, make sure that they are not continuously fetched on each reboot of the server.
-see what may be causing the front-end errors.
-update front-end to use API endpoints - can confirm they do indeed work (data = data.data is to do with how I send the data fron the endpoint to where it was called
 from)
-Get the file to update every 10 seconds using the latest ids in the file
-Clean up code, at this point it should then be working

-the tiplocs not showing and the image sidebar_route_error is probably due to the api being down, it was working and demonstrated yesterday.
-Yesterday Gabriel mentioned a mapping function that may help visualising the updates called 'stored journey'. Look into this.


_______________________________________________________________________________________________________________
01:01

The folder Independent_testing is a folder containing some experimental stuff. It can be deleted when project completed. It contains files where functions etc. are tested, they do not interact with the project in any way

Look in 'Independent_testing/usingSetInterval.js' for an example and explination of setInterval()
1.6 Refreshing Data with setInterval() - Working with Data and APIs in JavaScript:  https://www.youtube.com/watch?v=jKQUHGpOHqg

01:22

Able to connect to API : https://traindata-stag-api.railsmart.io/api/trains/tiploc/CREWEMD/2023-03-30 00:00:00/2023-03-30 23:59:59


01:27

3SQUARED_COMBINED is now able to connect to API it appears. All is ok. Route displays etc. Refer to 'screenshot_01_29 for reference.

01:31

task: get a function to trigger upon the 'fileChanged' emit

Tack completed at 01:33. Using route in the script does not work, but using a function written in the script does work.

Refer to screenshot_01_36. When the fetch and call for route() is made, the function no longer works. There may be an issue with calling the route function in there or how it is called.
refer to Screenshot_01_40. The activation and schedule ids are present and valid. The issue is calling route.



SO FAR, HOW DOES OUR SOCKET NOTIFICATION WORK:

1. socket made when webpage opened. ~ index.html ln 30
2. server detects the incoming socet connection from client-side. ~ server.js ln 31
3. If a change is made to movements, watchForFileChanges ~ ln 61 in server.js will emit a 'fileChanged' signal
4. In client-side, index.html ~ ln 31, when 'fileChanged' emitted, this would ideally trigger route() to go and get the latest data from the API and display it. (maybe there is a function that can take the movements file and use that to       display changes?). This can trigger functions. it's a matter of getting it to trigger one that'll update the map. Prehaps route() isn't imported properly for our intended use?

SO FAR, HOW DOES MOVEMENTS.JSON GET CHANGED:

(ideally, there would be a function to update the file every 10 seconds. getMovementUpdates is currently in exsistance, works, but getting setInterval() to also work with it is not happening. Refer to setInterval research for a clearer understanding of the function.)

1. functions.js ~ ln 56 " fetch(`API/writeE/${activationId}/${scheduleId}`) " is used to store the curent ids in use on a click event. This would be used to get updates from API on 'fileChanged'
2.  functions.js ~ ln 70 " fetch(`API/Movements_updates/` + e.currentTarget.activationId + `/` + e.currentTarget.scheduleId ) " logs the new movements to the file. Since the function these are called in, journeyClicked() is called on a click event, whenever a new train journey is clicked on, the movements woould be different as it is a new train being tracked. 

The change triggers the above.


_________________________________________________________________________________________________________________
02:00

Note: The TESTING-MAIN route() function has been changed to use srcElement to get data. This causes a conflict with how backend proposes to update the map with route(). A new function will most probably need to be made.

02:19

There are a lot of conflicts. There appears to be an issue with the displaying of the data in the sidebar in TESTING-MAIN. When using the same dates to make API calls and the same file tiplocs.json, TESTING-MAIN has an issue whereas TESTING-SOCKETS doesn't. Looking over the most recent code may provide a fix. Also, the server used by TESTING-MAIN does need to be updated, it is glitchy when making the tiploc file due to the experimental date retrival feature.

__________________________________________________________________________________________________________
02:24

Start over. In Experiment_Combination, use TESTING-SOCKETS as the base. This is due to it having the most up-to-date backend.
Then, implement the latest frontend features.

Start small. The Icon sise has been made bigger in TESTING-MAIN.
TASK:  Implement this in Experiment_Combination.

Note: frontend has added a toggle to show the stations passed by. Implement that next?

- headcode coming back as undefined
    var headCode = e.srcElement.headCode;
    var destinationLocation = e.srcElement.destinationLocation;
    var originLocation = e.srcElement.originLocation;
					Undefined ^


02:48

successfully implemented the bigger icons. Key is now shown.  Next, getting the dots along the track to display?
Currently going over functions.js

Note: after a few clicks on the sidebar, the tiplocs vanished. The issue may lay in route.js. The server seems to go down. It doesn't stop running, just stops responding. 

tiplocBtnClick() is responsible for showing all tiplocs along a route.

refer to screenshot_03_02. when clicking on the button to show the passing stations, the error 
" route.js:23 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'tiploc')
    at route.js:23:55
    at async route (route.js:18:5) " appears. The activation/schedule are not defined. " route: undefined undefined " - printed from route.js on ~ln 7
Refer to screenshot_03_05. The dots appear after clicking on the same route name once it fails the first time. Have a look into how the function works to diagnose the problem. 
The problem: tiploc not defined most likely due to undefined ids used to fetch

refer to screenshot_03_10. dots apprar for some on first click. solution: copy in all of the head and body code for index.html. Initially, the idea was to introduce the code slowly, but now it seems chunks at a time have to be added. The dots are clickable, informaiton is shown.

Note: the blanks error in the sidebar and freezing of the server occurs much quicker now. 

after initial dot display error with the same " Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'tiploc')
    at route.js:23:55
    at async route (route.js:18:5) " showing up, it proceeded to work. The error did not persist.

When editing headcode out of index.html, the webpage worked for longer than the max. of 3 train displays it did before when included.

_________________________________________________________________________________________________________________
03:33

Can confirm server stops responding after certian amount of calls. Why? The server is the same one in TESTING-SOCKETS and it didn't have that problem.
After testing TESTING-SOCKETS it now appears to have the same issue where calls are jot made after a certain amount, but it doesn't cause the tiplocs menu to go away and become blank/unreachable.


What is " storedJourney.push(e);
    route(storedJourney[0]); "


03:47

displaying the passing stations occurs how it should now. Solution: update functions.js

refer to screenshot_03_51. There is an issue with displaying the sidebar features now. Check if all images are in assets. There is an issue reading 'actualDeparture'

04:00 

refer to screenshot_04_00. The frontend now works with API endpoints.
Note: the website worked for a bit longer before crashing


route.js ~ ln 169 " console.log(allMovementData[allMovementData.length-1].plannedArrival); " prints 'undefined'

note: with all sockets edited out, it works with no freezes. Though the problem of having to scroll to see clickable options persists.

_________________________________________________________________________________________________
04:22

The issue of a disconnect appears to lie in the socket. The disconnect() added always displayed when the server would go down. Taking that out would be the best bet?
Starting sockets from scratch.


04:31

The problem does appear to have stemed from the use of 
"  socket.on('disconnect', () => {
        console.log('Disconnected');
    }); "
prehaps due to it's placement in .on(connection)?

All working. .on(disconnect) removed. Sockets detect manual file changes, react to it as described above. Changed manually due to the endpoints and such not being added in yet. Next task: update the functions so they use endpoints.



Refer to 04:49. The endpoints are now in use for the server. Compared to the API being called straight from the function, they both preform the same. Alot of the routes have issues didplaying. There could be an issue with the data recieved.


05:47

refer to screenshot_05_46. DONE. Front and back combined. Endpoints are in place. Causing alot of trouble, but the out-of-date files and date changing didn;t help. But as is, the file used and the dates specified, it works.
Look in console on browser, what is returned from API will show. Endpoints, Server?Client sockets, forintend features and backend features now work side-by-side. If editing from here, changes should be compatible. I'm not sure why the stations do not show, could be due to old data being used. An up-to-date file should be used. 

* tested with multiple trains, display is fine (for most, the odd expected issue)
* can show all tiplocs (the dots that represent passing stations) toggle works fine
* Headcode displays
* The sidebar train journey graphic shows
* No timing out anymore, no more dissapearing tiplocs, can browse to your heart's content
* Uses server endpoints, no calls to the API coming directly from frontend
* Can detect changes in movements.json, using sockets to trigger functions

NOTE: I've noticed going for tiplocs like Leeds, Edinbrough, London Kings Cross, York etc., the places that tend to be busy, usually return complete data.


___________________________________________________________________________________________________________

WHAT NEEDS DOING:	

	Front:

	* Glitches with displaying train path.
	* The sidebar Scroll issue; how you have to scroll upwards sometimes to see the tiplocs
	* I may have broken the part where it displays the date and stations in the sidebar...
	  Prehaps have a look over it and determine if it's the data or the code

	Back:

	* Make a function to update tiplocs.json daily
	* Updating file every 10 seconds
	* Displaying the changes on the map
	Note: if a side demo could be created, Martin said if we can create a demo where we manually change the 
		file and have it reflect on the map.
		(I think if we are able to modify the file and then modifications are replaced by an update, that's
		 proof enough?)
		 If no luck, setInterval(). Work with frontend to figure out where to put it.

	Both:

	* Powerpoint Presentation




______________________________________________________________________________________________________________
06:15

I accidentaly deleted it all by doing ctrl+x instead of ctrl+c... but I think I managed to restore all the files. Still works :)
